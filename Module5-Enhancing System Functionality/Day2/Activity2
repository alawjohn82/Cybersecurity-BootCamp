Activity File: Introduction to Scripts
In this activity, you are a junior administrator at Rezifp Pharma Inc.
It is your responsibility to ensure the security of the organizationâ€™s network by automating many tasks, such as moving patient data files, from various locations using cron.
Many of these tasks are accomplished through automation, using scripts written to run at regular intervals or as periodically as determined by your department.
In response to malware, adware, and virus attacks, your organization has asked you to ensure proper configuration management of all networking equipment and associated systems.
In addition to the threat of malware and attacks, portions of the Health Insurance Portability and Accountability Act (HIPAA) require organizations to maintain a regular backup regimen for the safe and secure storage of patient data. In response to HIPAA regulations, your organization also ensures that any unused, temporary, and cached files are removed regularly.
You have been tasked to:
Create a script, backup.sh, that creates a backup of the system's /home directory.
Create a script, update.sh, that upgrades packages to their most recent version, keeping the system up-to-date.
Bonus: Create a script, cleanup.sh, that removes any unused, temporary, and cached files.
Test the scripts by running them with aBsh, using the sudo ./<name of the script>.sh command.
Instructions
Begin by creating a directory to hold your scripts in ~/Security_scripts. Then, move into this directory.
Create a script file called backup.sh that does the following:
Creates a tar archive of /home. Save this to /var/backup/home.tar.
Moves the file /var/backup/home.tar to /var/backup/home.MMDDYYYY.tar. This allows you to save both the last backup you made, and the one you'll make now. Note: You can use any date you want, as long as it is in the MMDDYYYY format.
Lists all files in /var/backup, including file sizes, and saves the output to /var/backup/file_report.txt. ls -lh or ls -lah is useful for this task.
Prints how much memory your machine has free. Saves this to a file called /var/backup/disk_report.txt. free -h is useful for this task.
Hint:
free -h prints free memory.
ls -lh produces a long listing, including human-readable file sizes.
Create a script file called update.sh that does the following:
Updates apt.
Runs a command to upgrade all installed packages.
Runs a command to install new packages and upgrade the system.
Runs a command to remove unnecessary packages and their associated configurations.
Bonus: Add a line to the bottom of update.sh combining all of the commands with a single line of code.
Make all scripts executable.
Test the scripts by running them with Bash using the sudo ./<name of the script>.sh command.
Note: When testing backup.sh, stop the script with Ctrl + C. Otherwise, it will take a long time to create a full backup of /home. We just want to confirm that it successfully runs.
Bonus
Create a file called cleanup.sh that does the following:
Removes all files in /tmp and /var/tmp.
Clears the apt cache.
Cleans the thumbnails cache.
Research online and define the following terms: "apt cache" and "thumbnails cache."


Solution Guide: Introduction to Scripts
Completing this activity required the following steps:
Creating and moving into the directory ~/Security_scripts.
Writing shell script backup.sh to automate archives and backups.
Writing shell script update.sh to automate software package updates and removal.
Bonus: Writing shell script cleanup.sh to automate the cleanup of cached files and generate a report of system resource usage.
Testing the scripts by running them with Bash using the sudo ./<name of the script>.sh command.
Solutions
Begin by creating a directory to hold your scripts in ~/Security_scripts. Then, move into this directory.
mkdir -p ~/Security_scripts
cd ~/Security_scripts
backup.sh
See backup.sh for the complete script.
#!/bin/bash
# Create /var/backup if it doesn't exist
mkdir -p /var/backup
# Create new /var/backup/home.tar
tar -cvf /var/backup/home.tar /home
# Moves the file `/var/backup/home.tar` to `/var/backup/home.MMDDYYYY.tar`.
mv /var/backup/home.tar /var/backup/home.01012020.tar
# Creates an archive of `/home`and saves it to `/var/backup/home.tar`.
tar -cvf /var/backup/system.tar /home 	
# List all files in `/var/backup`, including file sizes, and save the output to `/var/backup/file_report.txt`.
ls -lh /var/backup > /var/backup/file_report.txt
# Print how much free memory your machine has left. Save this to a file called `/var/backup/disk_report.txt`.
free -h > /var/backup/disk_report.txt

update.sh
See update.sh for the complete script.
#!/bin/bash
# Ensure apt has all available updates
apt update -y
# Upgrade all installed packages
apt upgrade -y
# Install new packages, and uninstall any old packages that
# must be removed to install them
apt full-upgrade -y
# Remove unused packages and their associated configuration files
apt autoremove --purge -y
# Bonus - Perform with a single line of code.
apt update -y && apt upgrade -y && apt full-upgrade -y && apt-get autoremove --purge -y

Make each of these custom scripts executable.
Run the following commands:
chmod +x backup.sh
chmod +x update.sh
Test the scripts by running them with Bash using the sudo ./<name of the script>.sh command.
Note: Since we are interacting with system directories and processes such as apt, we need to use sudo for our scripts.
Run the following commands:
sudo ./backup.sh
When testing backup.sh, stop the script with Ctrl + C. Otherwise, it will take a long time to create a full backup of /home. We just want to see that it successfully runs.
sudo ./update.sh
Bonus
cleanup.sh
See cleanup.sh for the complete script.
#!/bin/bash
# Clean up temp directories
rm -rf /tmp/*
rm -rf /var/tmp/*	
# Clear apt cache
apt clean -y
# Clear thumbnail cache for sysadmin, instructor, and student
rm -rf /home/sysadmin/.cache/thumbnails
rm -rf /home/instructor/.cache/thumbnails
rm -rf /home/student/.cache/thumbnails
rm -rf /root/.cache/thumbnails

Make each of these custom scripts executable.
Run the following commands at the command prompt as follows:
chmod +x cleanup.sh
Test the scripts by running them with Bash using the sudo ./<name of the script>.sh command.
Since we are interacting with system directories and processes such as apt, we need to use sudo for our scripts.
sudo ./cleanup.sh
Apt cache: After installing a package, the apt manager saves the package and dependencies in a cache folder. They remain after installation unless the apt cache is cleared.
Thumbnails cache: With each image file, your Linux distro creates a thumbnail when you view images in your file manager. Thumbnails often remain for pictures that no longer exist. Therefore, this can be beneficial to clear old thumbnails.



